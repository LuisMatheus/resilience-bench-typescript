{"version":3,"file":"Executor.test.js","sourceRoot":"","sources":["../../../src/common/Executor.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport { SinonStub, stub } from 'sinon';\nimport { ExecuteWrapper } from './Executor';\n\nclass HandledError extends Error {}\n\ndescribe('executor', () => {\n  let executor: ExecuteWrapper;\n  let onSuccess: SinonStub;\n  let onFailure: SinonStub;\n\n  beforeEach(() => {\n    executor = new ExecuteWrapper(\n      error => error instanceof HandledError,\n      r => typeof r === 'number' && r % 2 === 0,\n    );\n    onSuccess = stub();\n    onFailure = stub();\n    executor.onFailure(onFailure);\n    executor.onSuccess(onSuccess);\n  });\n\n  it('handles successful calls', async () => {\n    const r = await executor.invoke(x => x * 3, 5);\n    expect(r).to.deep.equal({ success: 15 });\n    expect(onSuccess).to.been.calledOnce;\n    expect(onSuccess.args[0][0].duration).to.be.greaterThan(0);\n  });\n\n  it('deals with handled errors', async () => {\n    const error = new HandledError();\n    const r = await executor.invoke(() => {\n      throw error;\n    });\n    expect(r).to.deep.equal({ error });\n    expect(onFailure).to.been.calledOnce;\n    expect(onFailure.args[0][0].duration).to.be.greaterThan(0);\n    expect(onFailure.args[0][0].handled).to.be.true;\n    expect(onFailure.args[0][0].reason).to.deep.equal({ error });\n  });\n\n  it('deals with unhandled errors', async () => {\n    const error = new Error();\n    await expect(\n      executor.invoke(() => {\n        throw error;\n      }),\n    ).to.eventually.be.rejectedWith(error);\n\n    expect(onFailure).to.been.calledOnce;\n    expect(onFailure.args[0][0].duration).to.be.greaterThan(0);\n    expect(onFailure.args[0][0].handled).to.be.false;\n    expect(onFailure.args[0][0].reason).to.deep.equal({ error });\n  });\n});\n"]}