{"version":3,"file":"SamplingBreaker.test.js","sourceRoot":"","sources":["../../../src/breaker/SamplingBreaker.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, use } from 'chai';\nimport * as subset from 'chai-subset';\nimport { SinonFakeTimers, useFakeTimers } from 'sinon';\nimport { CircuitState } from '../CircuitBreakerPolicy';\nimport { SamplingBreaker } from './SamplingBreaker';\n\nuse(subset);\n\nconst getState = (b: SamplingBreaker) => {\n  const untyped: any = b;\n  return {\n    threshold: untyped.threshold,\n    minimumRpms: untyped.minimumRpms,\n    duration: untyped.duration,\n    windowSize: untyped.windowSize,\n    windows: untyped.windows.map((w: object) => ({ ...w })),\n    currentWindow: untyped.currentWindow,\n    currentFailures: untyped.currentFailures,\n    currentSuccesses: untyped.currentSuccesses,\n  };\n};\n\ndescribe('SamplingBreaker', () => {\n  describe('parameter creation', () => {\n    it('rejects if threshold out of range', () => {\n      expect(() => new SamplingBreaker({ threshold: -1, duration: 10 })).to.throw(RangeError);\n      expect(() => new SamplingBreaker({ threshold: 0, duration: 10 })).to.throw(RangeError);\n      expect(() => new SamplingBreaker({ threshold: 1, duration: 10 })).to.throw(RangeError);\n      expect(() => new SamplingBreaker({ threshold: 10, duration: 10 })).to.throw(RangeError);\n    });\n\n    it('creates good initial params', () => {\n      const b = new SamplingBreaker({ threshold: 0.2, duration: 10_000, minimumRps: 5 });\n      expect(getState(b)).to.containSubset({\n        threshold: 0.2,\n        duration: 10_000,\n        minimumRpms: 5 / 1000,\n        windowSize: 1000,\n      });\n\n      expect(getState(b).windows).to.have.lengthOf(10);\n    });\n\n    it('creates initial params for small durations', () => {\n      const b = new SamplingBreaker({ threshold: 0.2, duration: 103, minimumRps: 5 });\n      expect(getState(b)).to.containSubset({\n        threshold: 0.2,\n        duration: 105,\n        minimumRpms: 5 / 1000,\n        windowSize: 21,\n      });\n      expect(getState(b).windows).to.have.lengthOf(5);\n    });\n\n    it('creates guess for rpms', () => {\n      const b1 = new SamplingBreaker({ threshold: 0.2, duration: 103 });\n      // needs at least 5 failures/sec, threshold of 0.2 means 5 * 5 total req/s\n      expect(getState(b1).minimumRpms).to.equal(25 / 1000);\n\n      const b2 = new SamplingBreaker({ threshold: 0.25, duration: 103 });\n      // 5 * 4 here\n      expect(getState(b2).minimumRpms).to.equal(20 / 1000);\n    });\n  });\n\n  describe('windowing', () => {\n    let b: SamplingBreaker;\n    let clock: SinonFakeTimers;\n\n    beforeEach(() => {\n      b = new SamplingBreaker({ threshold: 0.5, duration: 5_000, minimumRps: 3 });\n      clock = useFakeTimers();\n    });\n\n    afterEach(() => {\n      clock.restore();\n    });\n\n    it('increments and wraps buckets correctly', () => {\n      for (let i = 0; i < 7; i++) {\n        for (let k = 0; k < i; k++) {\n          b.failure(CircuitState.Closed);\n          b.success(CircuitState.Closed);\n          b.success(CircuitState.Closed);\n        }\n\n        clock.tick(1000);\n      }\n\n      expect(getState(b)).to.containSubset({\n        currentFailures: 20,\n        currentSuccesses: 40,\n        currentWindow: 1,\n      });\n      expect(getState(b).windows).to.deep.equal([\n        { failures: 5, successes: 10, startedAt: 5000 },\n        { failures: 6, successes: 12, startedAt: 6000 },\n        { failures: 2, successes: 4, startedAt: 2000 },\n        { failures: 3, successes: 6, startedAt: 3000 },\n        { failures: 4, successes: 8, startedAt: 4000 },\n      ]);\n    });\n  });\n\n  describe('functionality', () => {\n    let b: SamplingBreaker;\n    let clock: SinonFakeTimers;\n\n    const createTestBreaker = () =>\n      (b = new SamplingBreaker({ threshold: 0.5, duration: 5_000, minimumRps: 3 }));\n\n    beforeEach(() => {\n      createTestBreaker();\n      clock = useFakeTimers();\n    });\n\n    afterEach(() => {\n      clock.restore();\n    });\n\n    it('does not start failing if below threshold rps', () => {\n      for (let i = 0; i < 10; i++) {\n        expect(b.failure(CircuitState.Closed)).to.be.false;\n        clock.tick(500); // advancing 0.5s each, never hits 3rps\n      }\n    });\n\n    it('fails once above rps', () => {\n      for (let i = 0; i < 3 * 5; i++) {\n        clock.tick(334);\n        expect(b.failure(CircuitState.Closed)).to.be.false;\n      }\n\n      b.failure(CircuitState.Closed);\n      // need one extra due to bucket approximation:\n      expect(b.failure(CircuitState.Closed)).to.be.true;\n    });\n\n    it('calculates rps correctly over time', () => {\n      // keep us right on the edge of closing (50% failure rate) for amounts of\n      // time, and verify that adding another failure\n      // right after each opens the circuit\n      for (let runLength = 10; runLength < 20; runLength++) {\n        createTestBreaker();\n\n        for (let i = 0; i < runLength; i++) {\n          b.success(CircuitState.Closed);\n          expect(b.failure(CircuitState.Closed)).to.be.false;\n          clock.tick(250);\n        }\n\n        expect(b.failure(CircuitState.Closed)).to.be.true;\n      }\n    });\n\n    it('resets when recoving from a half-open', () => {\n      for (let i = 0; i < 10; i++) {\n        b.failure(CircuitState.Closed);\n      }\n\n      b.success(CircuitState.HalfOpen);\n      expect(getState(b).currentFailures).to.equal(0);\n      expect(b.failure(CircuitState.Closed)).to.be.false;\n    });\n  });\n});\n"]}