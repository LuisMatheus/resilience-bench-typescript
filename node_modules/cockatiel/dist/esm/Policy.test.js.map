{"version":3,"file":"Policy.test.js","sourceRoot":"","sources":["../../src/Policy.test.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAC7B,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AACrD,OAAO,EACL,cAAc,EACd,QAAQ,EACR,SAAS,EACT,gBAAgB,EAChB,UAAU,EACV,IAAI,EACJ,KAAK,EACL,OAAO,EACP,SAAS,EACT,IAAI,GACL,MAAM,UAAU,CAAC;AAElB,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAElD,MAAM,QAAS,SAAQ,KAAK;CAAG;AAC/B,MAAM,QAAS,SAAQ,KAAK;CAAG;AAC/B,MAAM,QAAS,SAAQ,KAAK;CAAG;AAE/B,MAAM,WAAW,GAAG,CAAC,MAAa,EAAE,EAAE;IACpC,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACrB,MAAM,MAAM,GAAG,IAAI,CACjB,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,EAC/C,cAAc,CAAC,SAAS,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CACtF,CAAC;QAEF,qCAAqC;QACrC,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAC5E,kBAAkB,CACnB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,QAAQ,GAAG;YACf,KAAK,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC;YACpC,cAAc,CAAC,SAAS,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC;YACrF,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC;YAC1B,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,UAAU,CAAC;YACzC,IAAI;SACI,CAAC;QACX,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;QAEjC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE/C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YACxD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,QAAQ,OAAO,MAAM,EAAE;YACrB,KAAK,QAAQ;gBACX,MAAM,CAAC,WAAW,EAAE,CAAC;gBACrB,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBACpB,MAAM;YACR;gBACE,WAAW,CAAC,MAAM,CAAC,CAAC;SACvB;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,EAAE,GAAG,IAAI,EAAE;aACd,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC;aACtB,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,IAAI,QAAQ,EAAE,CAAC;aACtB,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC3B,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC3B,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAE/B,MAAM,MAAM,CACV,KAAK,CACH,UAAU,CAAC,QAAQ,CAAC;aACjB,MAAM,CAAC,QAAQ,CAAC;aAChB,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,CAAC;aAC1C,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,QAAQ,CAAC,EACtC,EAAE,WAAW,EAAE,EAAE,EAAE,CACpB,CAAC,OAAO,CAAC,EAAE,CAAC,CACd,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEtC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACtC,MAAM,EAAE,GAAG,IAAI,EAAE;aACd,MAAM,CAAC,CAAC,CAAC;aACT,OAAO,CAAC,IAAI,QAAQ,EAAE,CAAC;aACvB,MAAM,CAAC,CAAC,CAAC;aACT,OAAO,CAAC,IAAI,QAAQ,EAAE,CAAC;aACvB,MAAM,CAAC,CAAC,CAAC;aACT,OAAO,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC5B,MAAM,CAAC,CAAC,CAAC;aACT,OAAO,CAAC,QAAQ,CAAC;aACjB,MAAM,CAAC,CAAC,CAAC;aACT,OAAO,CAAC,KAAK,CAAC,CAAC;QAElB,MAAM,CACJ,MAAM,KAAK,CACT,gBAAgB,CAAC,QAAQ,CAAC;aACvB,YAAY,CAAC,QAAQ,CAAC;aACtB,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,CAAC;aAChD,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,EACpC,EAAE,WAAW,EAAE,EAAE,EAAE,CACpB,CAAC,OAAO,CAAC,EAAE,CAAC,CACd,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAElB,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,MAAM,UAAU;YAEP,MAAM,CAAC,CAAS,EAAE,OAAsB;gBAC7C,IAAI,OAAQ,CAAC,OAAO,GAAG,CAAC,EAAE;oBACxB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;iBAC3B;gBAED,OAAO,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,OAAQ,EAAE,CAAC;YACnC,CAAC;SACF;QAPC;YADC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;gDAO/C;QAGH,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAC;QAC3B,aAAa;QACb,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACtB,CAAC,EAAE,CAAC;YACJ,MAAM,EAAE,CAAC,CAAC,MAAM;YAChB,OAAO,EAAE,CAAC;SACX,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,UAAU;YAEP,MAAM,CAAC,CAAS,EAAE,OAAsB;gBAC7C,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;gBAC3C,GAAG,CAAC,KAAK,EAAE,CAAC;gBACZ,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;gBAC1C,OAAO,CAAC,GAAG,CAAC,CAAC;YACf,CAAC;SACF;QAPC;YADC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;gDAO/C;QAGH,MAAM,GAAG,GAAG,IAAI,eAAe,EAAE,CAAC;QAClC,MAAM,CAAC,GAAG,IAAI,UAAU,EAAE,CAAC;QAC3B,aAAa;QACb,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from 'chai';\nimport { stub } from 'sinon';\nimport { ConsecutiveBreaker } from './breaker/Breaker';\nimport { BrokenCircuitError } from './errors/Errors';\nimport {\n  circuitBreaker,\n  fallback,\n  handleAll,\n  handleResultType,\n  handleType,\n  noop,\n  retry,\n  timeout,\n  usePolicy,\n  wrap,\n} from './Policy';\nimport { IRetryContext } from './RetryPolicy';\nimport { TimeoutStrategy } from './TimeoutPolicy';\n\nclass MyError1 extends Error {}\nclass MyError2 extends Error {}\nclass MyError3 extends Error {}\n\nconst assertNever = (_value: never) => {\n  throw new Error('unreachable');\n};\n\ndescribe('Policy', () => {\n  it('wraps', async () => {\n    const policy = wrap(\n      retry(handleType(MyError1), { maxAttempts: 3 }),\n      circuitBreaker(handleAll, { halfOpenAfter: 100, breaker: new ConsecutiveBreaker(2) }),\n    );\n\n    // should retry and break the circuit\n    await expect(policy.execute(stub().throws(new MyError1()))).to.be.rejectedWith(\n      BrokenCircuitError,\n    );\n  });\n\n  it('wraps and keeps correct types', async () => {\n    const policies = [\n      retry(handleAll, { maxAttempts: 2 }),\n      circuitBreaker(handleAll, { halfOpenAfter: 100, breaker: new ConsecutiveBreaker(2) }),\n      fallback(handleAll, 'foo'),\n      timeout(1000, TimeoutStrategy.Aggressive),\n      noop,\n    ] as const;\n    const policy = wrap(...policies);\n\n    expect(policy.wrapped).to.deep.equal(policies);\n\n    const result = await policy.execute(context => {\n      expect(context.signal).to.be.an.instanceOf(AbortSignal);\n      expect(context.attempt).to.equal(0);\n      return 1234;\n    });\n\n    switch (typeof result) {\n      case 'string':\n        result.toUpperCase();\n        break;\n      case 'number':\n        Math.pow(result, 2);\n        break;\n      default:\n        assertNever(result);\n    }\n  });\n\n  it('applies error filters', async () => {\n    const fn = stub()\n      .onCall(0)\n      .throws(new MyError1())\n      .onCall(1)\n      .throws(new MyError2())\n      .onCall(2)\n      .throws(new MyError3('foo'))\n      .onCall(3)\n      .throws(new Error('potato'))\n      .onCall(4)\n      .throws(new MyError3('bar'));\n\n    await expect(\n      retry(\n        handleType(MyError1)\n          .orType(MyError2)\n          .orType(MyError3, e => e.message === 'foo')\n          .orWhen(e => e.message === 'potato'),\n        { maxAttempts: 10 },\n      ).execute(fn),\n    ).to.be.rejectedWith(MyError3, 'bar');\n\n    expect(fn).to.have.callCount(5);\n  });\n\n  it('applies result filters', async () => {\n    const fn = stub()\n      .onCall(0)\n      .returns(new MyError1())\n      .onCall(1)\n      .returns(new MyError2())\n      .onCall(2)\n      .returns(new MyError3('foo'))\n      .onCall(3)\n      .returns('potato')\n      .onCall(4)\n      .returns('ok!');\n\n    expect(\n      await retry(\n        handleResultType(MyError1)\n          .orResultType(MyError2)\n          .orResultType(MyError3, e => e.message === 'foo')\n          .orWhenResult(e => e === 'potato'),\n        { maxAttempts: 10 },\n      ).execute(fn),\n    ).to.equal('ok!');\n\n    expect(fn).to.have.callCount(5);\n  });\n\n  it('applies use', async () => {\n    class Calculator {\n      @usePolicy(retry(handleAll, { maxAttempts: 5 }))\n      public double(n: number, context: IRetryContext) {\n        if (context!.attempt < 2) {\n          throw new Error('failed');\n        }\n\n        return { n: n * 2, ...context! };\n      }\n    }\n\n    const c = new Calculator();\n    // @ts-ignore\n    const r = await c.double(2);\n    expect(r).to.deep.equal({\n      n: 4,\n      signal: r.signal,\n      attempt: 2,\n    });\n  });\n\n  it('uses cancellation token in use', async () => {\n    class Calculator {\n      @usePolicy(retry(handleAll, { maxAttempts: 5 }))\n      public double(n: number, context: IRetryContext) {\n        expect(n).to.equal(2);\n        expect(context.signal.aborted).to.be.false;\n        cts.abort();\n        expect(context.signal.aborted).to.be.true;\n        return n * 2;\n      }\n    }\n\n    const cts = new AbortController();\n    const c = new Calculator();\n    // @ts-ignore\n    expect(await c.double(2, cts.signal)).to.equal(4);\n  });\n});\n"]}