{"version":3,"file":"util.test.js","sourceRoot":"","sources":["../../src/common/util.test.ts"],"names":[],"mappings":";;;AAAA,iDAAqC;AACrC,2BAA2C;AAC3C,6BAA6B;AAE7B;;GAEG;AACI,KAAK,UAAU,UAAU,CAAC,IAAY;IAC3C,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAChD,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IAE3C,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAA,WAAM,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAE1C,IAAA,kBAAa,EAAC,IAAI,EAAE,6BAA6B,IAAI,EAAE,CAAC,CAAC;IAEzD,MAAM,KAAK,GAAG,IAAA,oBAAI,EAAC,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IACrD,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9C,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACpC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC1B,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;AACzE,CAAC;AAnBD,gCAmBC","sourcesContent":["import { fork } from 'child_process';\nimport { unlink, writeFileSync } from 'fs';\nimport * as path from 'path';\n\n/**\n * Runs the code in a child process, and returns its stdout/err string.\n */\nexport async function runInChild(code: string) {\n  const cwd = path.resolve(__dirname, '..', '..');\n  const file = path.resolve(cwd, '.test.js');\n\n  after(done => unlink(file, () => done()));\n\n  writeFileSync(file, `const c = require('./');\\n${code}`);\n\n  const child = fork(file, [], { cwd, stdio: 'pipe' });\n  const output: Buffer[] = [];\n  child.stderr?.on('data', d => output.push(d));\n  child.stdout?.on('data', d => output.push(d));\n\n  await new Promise((resolve, reject) => {\n    child.on('error', reject);\n    child.on('exit', resolve);\n  });\n\n  return Buffer.concat(output).toString().replace(/\\r?\\n/g, '\\n').trim();\n}\n"]}