{"version":3,"file":"CircuitBreakerPolicy.test.js","sourceRoot":"","sources":["../src/CircuitBreakerPolicy.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport { SinonFakeTimers, SinonStub, stub, useFakeTimers } from 'sinon';\nimport { promisify } from 'util';\nimport { ConsecutiveBreaker } from './breaker/Breaker';\nimport { CircuitBreakerPolicy, CircuitState } from './CircuitBreakerPolicy';\nimport { abortedSignal } from './common/abort';\nimport { BrokenCircuitError, TaskCancelledError } from './errors/Errors';\nimport { IsolatedCircuitError } from './errors/IsolatedCircuitError';\nimport { circuitBreaker, handleAll, handleType } from './Policy';\n\nclass MyException extends Error {}\n\nconst delay = promisify(setTimeout);\n\ndescribe('CircuitBreakerPolicy', () => {\n  let p: CircuitBreakerPolicy;\n  let clock: SinonFakeTimers;\n  let onBreak: SinonStub;\n  let onReset: SinonStub;\n  let onHalfOpen: SinonStub;\n\n  beforeEach(() => {\n    p = circuitBreaker(handleType(MyException), {\n      halfOpenAfter: 1000,\n      breaker: new ConsecutiveBreaker(2),\n    });\n    clock = useFakeTimers();\n    onBreak = stub();\n    onReset = stub();\n    onHalfOpen = stub();\n    p.onBreak(onBreak);\n    p.onReset(onReset);\n    p.onHalfOpen(onHalfOpen);\n  });\n\n  afterEach(() => {\n    clock.restore();\n  });\n\n  const openBreaker = async () => {\n    const s = stub().throws(new MyException());\n    await expect(p.execute(s)).to.be.rejectedWith(MyException);\n    await expect(p.execute(s)).to.be.rejectedWith(MyException);\n  };\n\n  it('allows calls when open', async () => {\n    expect(await p.execute(() => 42)).to.equal(42);\n  });\n\n  it('opens after failing calls', async () => {\n    const s = stub().throws(new MyException());\n\n    await expect(p.execute(s)).to.be.rejectedWith(MyException);\n    expect(p.state).to.equal(CircuitState.Closed);\n    expect(onBreak).not.called;\n\n    await expect(p.execute(s)).to.be.rejectedWith(MyException);\n    expect(p.state).to.equal(CircuitState.Open);\n    expect(onBreak).called;\n\n    await expect(p.execute(s)).to.be.rejectedWith(BrokenCircuitError);\n    expect(p.state).to.equal(CircuitState.Open);\n\n    expect((p.lastFailure as any).error).to.be.an.instanceOf(MyException);\n    expect(onBreak).calledOnce;\n    expect(s).calledTwice;\n  });\n\n  it('closes if the half open test succeeds', async () => {\n    await openBreaker();\n\n    clock.tick(1000);\n\n    const result = p.execute(stub().resolves(42));\n    expect(p.state).to.equal(CircuitState.HalfOpen);\n    expect(onHalfOpen).calledOnce;\n    expect(await result).to.equal(42);\n    expect(p.state).to.equal(CircuitState.Closed);\n    expect(onReset).calledOnce;\n  });\n\n  it('dedupes half-open tests', async () => {\n    await openBreaker();\n    clock.tick(1000);\n\n    // Two functinos, a and b. We execute with \"a\" first, and then make sure\n    // it returns before \"b\" gets called.\n    let aReturned = false;\n    const a = async () => {\n      await delay(10);\n      aReturned = true;\n      return 1;\n    };\n\n    const b = async () => {\n      expect(aReturned).to.be.true;\n      return 2;\n    };\n\n    const todo = [\n      expect(p.execute(a)).to.eventually.equal(1),\n      expect(p.execute(b)).to.eventually.equal(2),\n    ];\n\n    clock.tick(10);\n\n    await Promise.all(todo);\n  });\n\n  it('stops deduped half-open tests if the circuit reopens', async () => {\n    await openBreaker();\n    clock.tick(1000);\n\n    // Two functinos, a and b. We execute with \"a\" first, and then make sure\n    // it returns before \"b\" gets called.\n    const a = async () => {\n      await delay(10);\n      throw new MyException();\n    };\n\n    const b = async () => {\n      throw new Error('expected to not be called');\n    };\n\n    const todo = [\n      expect(p.execute(a)).to.be.rejectedWith(MyException),\n      expect(p.execute(b)).to.be.rejectedWith(BrokenCircuitError),\n    ];\n\n    clock.tick(10);\n\n    await Promise.all(todo);\n  });\n\n  it('re-opens if the half open fails', async () => {\n    await openBreaker();\n\n    clock.tick(1000);\n\n    const s = stub().throws(new MyException());\n    await expect(p.execute(s)).to.be.rejectedWith(MyException);\n    expect(p.state).to.equal(CircuitState.Open);\n  });\n\n  it('handles isolation correctly', async () => {\n    const handle1 = p.isolate();\n    expect(onBreak).calledOnceWith({ isolated: true });\n\n    const handle2 = p.isolate();\n    expect(onBreak).calledOnce;\n\n    expect(p.state).to.equal(CircuitState.Isolated);\n    await expect(p.execute(() => 42)).to.be.rejectedWith(IsolatedCircuitError);\n\n    handle1.dispose();\n    expect(p.state).to.equal(CircuitState.Isolated);\n    expect(onReset).not.called;\n\n    handle2.dispose();\n    expect(p.state).to.equal(CircuitState.Closed);\n    expect(onReset).calledOnce;\n\n    expect(await p.execute(() => 42)).to.equal(42);\n  });\n\n  it('links parent cancellation token', async () => {\n    const parent = new AbortController();\n    await circuitBreaker(handleAll, {\n      halfOpenAfter: 1000,\n      breaker: new ConsecutiveBreaker(3),\n    }).execute(({ signal }) => {\n      expect(signal.aborted).to.be.false;\n      parent.abort();\n      expect(signal.aborted).to.be.true;\n    }, parent.signal);\n  });\n\n  it('aborts function execution if half open test succeeds', async () => {\n    await openBreaker();\n\n    clock.tick(1000);\n\n    // half open test:\n    p.execute(stub().resolves(42));\n\n    // queued timeout:\n    await expect(p.execute(stub(), abortedSignal)).to.be.rejectedWith(TaskCancelledError);\n\n    expect(p.state).to.equal(CircuitState.Closed);\n    expect(onReset).calledOnce;\n  });\n});\n"]}